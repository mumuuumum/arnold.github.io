<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>My New Post</title>
    <url>/2023/02/23/My-New-Post/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/02/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>关系、关系模式和关系数据库-Lecture2</title>
    <url>/2023/02/23/%E5%85%B3%E7%B3%BB%E3%80%81%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93-Lecture2/</url>
    <content><![CDATA[<p><strong>关系、关系模式和关系数据库</strong></p>
<p><strong>域(domain)：一组具有相同数据类型的值的集合（单一简单的数据类型（复杂的是几个的组合，其“域”为笛卡尔乘积））。</strong></p>
<h1 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h1><p><strong>笛卡尔积（Cartesian Product）：</strong></p>
<p>![image-20230306195343236](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306195343236.png)</p>
<p><strong>元组(Tuple)：</strong>笛卡尔积中每一个元素（$d_1,d_2,…,d_n$）叫作一个n元组（n-tuple）或简称元组</p>
<p>**分量(Component):**笛卡尔积元素中的每一个值$d_i$叫做一个分量</p>
<p><strong>基数（Cardinal number）：</strong></p>
<p>![image-20230306200009759](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306200009759.png)</p>
<h2 id="笛卡尔积表示方法"><a href="#笛卡尔积表示方法" class="headerlink" title="笛卡尔积表示方法"></a>笛卡尔积表示方法</h2><ol>
<li>笛卡尔积可表示为一张二维表</li>
<li>表中的每行对应一个元组，表中的每列对应一个域</li>
</ol>
<h1 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h1><p><strong>关系（Relation）:</strong></p>
<p>![image-20230306200309525](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306200309525.png)</p>
<p><strong>元组（tuple）：</strong></p>
<p>关系中的每个元素是关系中的元组，通常用<em>t</em>表示。</p>
<h2 id="关系的表示"><a href="#关系的表示" class="headerlink" title="关系的表示"></a>关系的表示</h2><p>关系也是一个二维表，表的每行对应一个元组，表的每列对应一个域</p>
<p><strong>属性（域＋意义）：</strong></p>
<p>![image-20230306200435674](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306200435674.png)</p>
<p><strong>码：</strong></p>
<p>![image-20230306200457414](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306200457414.png)</p>
<p>候选码第三点不可能有超越的意思是，如果全码也不成立，那么就有两个元素相同，而集合中的元素是不重复的，那么这就不会是一个”关系“</p>
<h2 id="关系的类别"><a href="#关系的类别" class="headerlink" title="关系的类别"></a>关系的类别</h2><p><strong>基本关系（基本表或者基表）：</strong>实际存在的表，是实际存储数据的逻辑表示</p>
<p><strong>查询表：</strong>查询结果对应的表</p>
<p><strong>视图表（可以捂元组或者（和）属性，也可以增加属性）：</strong>由基本表或其他视图表导出的表，是<strong>虚表</strong>，不对应实际存储的数据，用来实现外模式的方法</p>
<p><strong>基本关系的性质：</strong></p>
<p>![image-20230306203348836](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306203348836.png)</p>
<h1 id="关系模式"><a href="#关系模式" class="headerlink" title="关系模式"></a>关系模式</h1><p>关系模式（Relation Schema）是型，关系是值，关系模式是对关系的描述，关系模式包括了元组集合的结构、完整性约束条件。关系模式是静态的、稳定的；关系是关系模式在某一时刻的状态或内容，是动态的，随时间不断变化的。关系模式与关系笼统称为关系，通过上下文加以区别。</p>
<p>![image-20230306203508426](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306203508426.png)</p>
<p>关系模式可以形式化地表示为：<em>R<strong>（</strong>U<strong>，</strong>D，</em>DOM<em>，<strong>F</strong>）</em></p>
<p>![image-20230306203557200](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306203557200.png)</p>
<p>![image-20230306203649581](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306203649581.png)</p>
<p><strong>关系数据库：</strong>在一个给定的应用领域中，所有关系的集合构成一个关系数据库</p>
<p>![image-20230306204004708](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306204004708.png)</p>
<h1 id="关系的完整性（难度，并且要结合前几个lecture）"><a href="#关系的完整性（难度，并且要结合前几个lecture）" class="headerlink" title="关系的完整性（难度，并且要结合前几个lecture）"></a>关系的完整性（难度，并且要结合前几个lecture）</h1><p><strong>关系的三类完整性约束：实体完整性、参照完整性、用户定义的完整性</strong></p>
<p>![image-20230306204210859](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306204210859.png)</p>
<h2 id="实体完整性（Entity-Integrity）"><a href="#实体完整性（Entity-Integrity）" class="headerlink" title="实体完整性（Entity Integrity）"></a>实体完整性（Entity Integrity）</h2><p><strong>定义：</strong>若属性<em>*<em>A</em>是基本关系*R</em>的主属性<strong>，则属性</strong><em>A</em>不能取空值**，空值就是“不知道”或“不存在”或“无意义”的值</p>
<p><strong>例子：</strong></p>
<p>关系（模式）：选修（<strong>学号</strong>，<strong>课程号</strong>，成绩），学号和课程号为主码，这两个属性都不能取空值</p>
<p><strong>基本关系（基本表或者基表）：</strong>实际存在的表，是实际存储数据的逻辑表示</p>
<p><strong>说明：</strong></p>
<ol>
<li>实体完整性规则是针对基本关系而言的。一个基本表通常对应现实世界的一个实体集（参照上述定义）。</li>
<li>现实世界中的实体是可区分的，即它们具有某种唯一性标识。</li>
<li>关系模型中以主码作为唯一性标识。</li>
<li>主码中的属性即主属性不能取空值。（主属性取空值，就说明存在某个不可标识的实体，即存在不可区分的实体，这与第2点相矛盾，因此这个规则称为实体完整性）</li>
</ol>
<h2 id="关系间的引用"><a href="#关系间的引用" class="headerlink" title="关系间的引用"></a>关系间的引用</h2><p>在关系模型中实体及实体间的联系都是用关系来描述的，自然存在着关系与关系间的引用。理解见下。</p>
<p><strong>实体之间的联系通常指不同实体集之间的联系，有m对n（m&#x3D;1,k;n&#x3D;1,j），实体内部的联系通常指组成实体的各个属性之间的联系</strong></p>
<p>关系（模式）是型，关系是值</p>
<p>![image-20230306205653594](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306205653594.png)</p>
<p>eg：</p>
<p>![image-20230306205845281](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306205845281.png)</p>
<p>![image-20230306205924450](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306205924450.png)</p>
<p>![image-20230306205930431](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306205930431.png)</p>
<h3 id="外码"><a href="#外码" class="headerlink" title="外码"></a>外码</h3><p>设<em>*<em>F</em>是基本关系*R</em>的一个或一组属性<strong>，但</strong>不是关系<em>R</em>的(主)码(F可以是主码的一部分，但不是完全主码)<strong>。如果</strong><em>F</em>与基本关系<em>S</em>的主码$k_S$<strong>相对应，则称</strong><em>F</em>是<em>R</em>的外码**（Foreign Key）。</p>
<p>如：例2 学号是选修关系的一个属性，但不是选修关系的主码，学号与基本关系学生关系的主码学号相对应，那么学号是选修关系的一个外码。</p>
<p>例3 班长是学生关系的一个属性，但不是该关系的主码，但是学生实体及其内部的领导关系（由于属性相同其实也是学生关系？）的主码，那么班长是学生关系的一个外码，引用了学生实体及其内部的领导关系（学生关系）的一个外码。</p>
<p>基本关系<em>R</em>称为参照关系（Referencing Relation）</p>
<p>基本关系<em>S</em>称为被参照关系（Referenced Relation）或目标关系（Target Relation）</p>
<p>关系<em>R</em>和<em>S</em>不一定是不同的关系</p>
<p>目标关系<em>S</em>的主码$K_s$和参照关系的外码<em>F</em>必须定义在同一个（或一组）域上</p>
<p>外码并不一定要与相应的主码同名（学生关系）</p>
<p>当外码与相应的主码属于不同关系时，往往取相同的名字，以便于识别</p>
<h2 id="参照完整性规则"><a href="#参照完整性规则" class="headerlink" title="参照完整性规则"></a>参照完整性规则</h2><p><strong>定义：</strong>若属性（或属性组）<em>F</em>是基本关系<em>R</em>的外码,它与基本关系<em>S</em>的主码$Ks$相对应（基本关系<em>R</em>和<em>S</em>不一定是不同的关系），则对于<em>R</em>中每个元组在<em>F</em>上的值必须为：</p>
<p>或者取空值（<em>F</em>的每个属性值均为空值）</p>
<p>或者等于<em>S</em>中某个元组的主码值</p>
<p>如果取了两者之外，就意味着F有超出了S作为主码现有的域，主码的意义是完全表示每个实体，那么有一个这样的F属性的实体是不存在的，那么这个取就是无意义的。</p>
<p>eg：</p>
<p>![image-20230306213338420](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306213338420.png)</p>
<h2 id="用户定义的完整性"><a href="#用户定义的完整性" class="headerlink" title="用户定义的完整性"></a>用户定义的完整性</h2><p><strong>定义：</strong>针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求</p>
<p>关系模型应提供定义和检验这类完整性的机制，以便用统一的系统的方法处理它们，而不需由应用程序承担这一功能</p>
<p>eg:</p>
<p>![image-20230306213513249](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306213513249.png)</p>
]]></content>
      <tags>
        <tag>数据管理基础</tag>
      </tags>
  </entry>
  <entry>
    <title>关系模型-Lecture1</title>
    <url>/2023/02/23/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B-Lecture1/</url>
    <content><![CDATA[<p><strong>关系模型——逻辑模型的一种</strong></p>
<h1 id="逻辑模型"><a href="#逻辑模型" class="headerlink" title="逻辑模型"></a>逻辑模型</h1><p>将信息世界转换为机器世界</p>
<p>基本问题是如何在机器世界中表达”低层“数据结构和”高层“数据结构？</p>
<p>![image-20230306153835342](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306153835342.png)</p>
<p>常用的数据模型</p>
<p>![image-20230306153851065](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306153851065.png)<strong>关系模型</strong></p>
<h1 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h1><p>l在用户观点下，关系模型中数据的逻辑结构是一张二维表，它由行和列组成。<strong>属性、元组</strong></p>
<p>![image-20230306154041682](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306154041682.png)</p>
<h2 id="关系模型的数据结构"><a href="#关系模型的数据结构" class="headerlink" title="关系模型的数据结构"></a>关系模型的数据结构</h2><p>![image-20230306154120203](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306154120203.png)</p>
<p>关系必须是规范化的，满足一定的规范条件</p>
<p><strong>最基本的规范条件：关系的每一个分量必须是一个不可分的数据项, 不允许表中还有表</strong> </p>
<p>![image-20230306154341923](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306154341923.png)</p>
<h2 id="关系模型的操作与完整性约束"><a href="#关系模型的操作与完整性约束" class="headerlink" title="关系模型的操作与完整性约束"></a>关系模型的操作与完整性约束</h2><p>![image-20230306154507843](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306154507843.png)</p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>![image-20230306154542972](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306154542972.png)</p>
<h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><p>![image-20230306154705030](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306154705030.png)</p>
<h1 id="数据库系统的结构"><a href="#数据库系统的结构" class="headerlink" title="数据库系统的结构"></a>数据库系统的结构</h1><p>通常采用三级模式</p>
<p><strong>模式（Schema）：</strong></p>
<p>![image-20230306193433024](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306193433024.png)</p>
<p><strong>实例（Instance）：</strong></p>
<p>![image-20230306193512882](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306193512882.png)</p>
<p>![image-20230306193554967](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306193554967.png)</p>
<p><strong>三级模式：</strong></p>
<p>![image-20230306193611965](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306193611965.png)</p>
<h2 id="模式（Schema）"><a href="#模式（Schema）" class="headerlink" title="模式（Schema）"></a>模式（Schema）</h2><p>![image-20230306193658719](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306193658719.png)</p>
<h3 id="外模式"><a href="#外模式" class="headerlink" title="外模式"></a>外模式</h3><p>![image-20230306193757229](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306193757229.png)</p>
<p>![image-20230306193826120](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306193826120.png)</p>
<h3 id="内模式"><a href="#内模式" class="headerlink" title="内模式"></a>内模式</h3><p>![image-20230306193847916](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306193847916.png)</p>
<h2 id="数据库的二级映像与数据独立性"><a href="#数据库的二级映像与数据独立性" class="headerlink" title="数据库的二级映像与数据独立性"></a>数据库的二级映像与数据独立性</h2><p>![image-20230306193950221](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306193950221.png)</p>
<h3 id="外模式-x2F-模式映像"><a href="#外模式-x2F-模式映像" class="headerlink" title="外模式&#x2F;模式映像"></a>外模式&#x2F;模式映像</h3><p>![image-20230306194006197](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306194006197.png)</p>
<h3 id="模式-x2F-内模式映像"><a href="#模式-x2F-内模式映像" class="headerlink" title="模式&#x2F;内模式映像"></a>模式&#x2F;内模式映像</h3><p>![image-20230306194113408](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306194113408.png)</p>
<h3 id="数据库的二级映像"><a href="#数据库的二级映像" class="headerlink" title="数据库的二级映像"></a>数据库的二级映像</h3><p>数据库模式</p>
<p>![image-20230306194224812](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306194224812.png)</p>
<p>数据库内模式</p>
<p>![image-20230306194232267](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306194232267.png)</p>
<p>数据库外模式</p>
<p>![image-20230306194239361](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306194239361.png)</p>
<p>![image-20230306194244894](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306194244894.png)</p>
<p>二级映像</p>
<p>![image-20230306194353698](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306194353698.png)</p>
<h1 id="数据库系统的组成"><a href="#数据库系统的组成" class="headerlink" title="数据库系统的组成"></a>数据库系统的组成</h1><h2 id="软硬件平台"><a href="#软硬件平台" class="headerlink" title="软硬件平台"></a>软硬件平台</h2><p>![image-20230306194710031](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306194710031.png)</p>
<h2 id="人员"><a href="#人员" class="headerlink" title="人员"></a>人员</h2><p>![image-20230306194715962](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306194715962.png)</p>
]]></content>
      <tags>
        <tag>数据管理基础</tag>
      </tags>
  </entry>
  <entry>
    <title>关系型数据库-Lecture0</title>
    <url>/2023/02/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0-Lecture0/</url>
    <content><![CDATA[<p><strong>数据库概述</strong></p>
<h1 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h1><h2 id="DBMS-DataBase-Management-System数据库管理系统"><a href="#DBMS-DataBase-Management-System数据库管理系统" class="headerlink" title="DBMS:DataBase Management System数据库管理系统"></a>DBMS:DataBase Management System数据库管理系统</h2><p>DBSM是DB的管理软件，是一种软件产品，将一个企业的数据以记录的形式在计算机中保存起来。</p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>为同一个目的而保存起来的所有数据的集合称为数据库</p>
<h1 id="数据库用户"><a href="#数据库用户" class="headerlink" title="数据库用户"></a>数据库用户</h1><p>最终用户：</p>
<ul>
<li>临时用户(用SQL语句访问DBMS)</li>
<li>缺乏经验的用户（用菜单访问DBMS的用户）</li>
</ul>
<p>应用程序员（编写菜单程序的程序员）</p>
<p>数据库管理员（DBA）：数据库系统中，负责数据库设计、建立、日常管理和运行维护的人员</p>
<h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><h2 id="三种模型"><a href="#三种模型" class="headerlink" title="三种模型"></a>三种模型</h2><p>概念模型、逻辑模型、物理模型</p>
<p>![image-20230306151920720](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306151920720.png)</p>
<h2 id="两步抽象"><a href="#两步抽象" class="headerlink" title="两步抽象"></a>两步抽象</h2><p>![image-20230306152040619](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306152040619.png)</p>
<h2 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>描述数据库的组成对象与对象之间的联系。</p>
<p>![image-20230306152220008](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306152220008.png)</p>
<h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><p>![image-20230306152239103](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306152239103.png)</p>
<h3 id="数据的完整性约束条件"><a href="#数据的完整性约束条件" class="headerlink" title="数据的完整性约束条件"></a>数据的完整性约束条件</h3><p>![image-20230306152309238](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306152309238.png)</p>
<h2 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h2><p>![image-20230306152518224](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306152518224.png)</p>
<h3 id="信息世界的基本概念"><a href="#信息世界的基本概念" class="headerlink" title="信息世界的基本概念"></a>信息世界的基本概念</h3><p><strong>实体（Entity）</strong></p>
<p>![image-20230306152629678](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306152629678.png)</p>
<p><strong>属性（Attribute）</strong></p>
<p>![image-20230306152702487](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306152702487.png)</p>
<p><strong>码（Key）</strong></p>
<p>![image-20230306152731322](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306152731322.png)</p>
<p><strong>实体型（Entity Type）</strong></p>
<p>![image-20230306152812217](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306152812217.png)</p>
<p><strong>实体集（Entity Set）</strong></p>
<p>![image-20230306152901809](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306152901809.png)</p>
<p><strong>联系（Relationship）</strong> </p>
<p>![image-20230306152925313](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306152925313.png)</p>
<h3 id="实体的联系"><a href="#实体的联系" class="headerlink" title="实体的联系"></a>实体的联系</h3><p>![image-20230306153306591](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306153306591.png)</p>
<p>![image-20230306153312049](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306153312049.png)</p>
<p>![image-20230306153326045](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306153326045.png)</p>
<p>![image-20230306153338959](C:\Users\Zhang Songqin\AppData\Roaming\Typora\typora-user-images\image-20230306153338959.png)</p>
]]></content>
      <tags>
        <tag>数据管理基础</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程与计算II-Lecture0</title>
    <url>/2023/02/27/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E8%AE%A1%E7%AE%97II-Lecture0/</url>
    <content><![CDATA[<h1 id="Lecture0"><a href="#Lecture0" class="headerlink" title="Lecture0"></a>Lecture0</h1><h2 id="软件工程基础"><a href="#软件工程基础" class="headerlink" title="软件工程基础"></a>软件工程基础</h2><p>软件、软件工程、知识域、如何学</p>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><h4 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h4><p>信息的记录、交流、存储</p>
<p>信息-&gt;计算-&gt;数字计算机-&gt;软件</p>
<h4 id="数字计算历史"><a href="#数字计算历史" class="headerlink" title="数字计算历史"></a>数字计算历史</h4><h3 id="Foundation-of-Digital-Computing-30s"><a href="#Foundation-of-Digital-Computing-30s" class="headerlink" title="Foundation of Digital Computing - 30s"></a>Foundation of Digital Computing - 30s</h3><ol>
<li>硬件:微分计算器、继电器式计算机、ABC原型计算、Harvard Mark 1 IBM实验室</li>
<li>Theory 理论<ol>
<li>《论可计算数及其在判定问题上的应⽤》-Alan Turing</li>
<li>电⼦继电器可以实现布尔符号逻辑 Claude Elwood Shannon</li>
</ol>
</li>
</ol>
<h3 id="Digital-Computers-40s"><a href="#Digital-Computers-40s" class="headerlink" title="Digital Computers - 40s"></a>Digital Computers - 40s</h3><ol>
<li>ENIAC:第一台计算机</li>
<li>Programming the ENIAC</li>
<li>Programming chart</li>
<li>编程的步骤<ol>
<li>将问题映射到机器上的任务很复杂，通常需要几个星期。</li>
<li>程序在纸上完成后，通过操纵开关和电缆将程序”导入”ENIAC的过程需要额外的几天时间。</li>
<li>随后是一段时间的验证和调试，借助于机器的”单步”能力。</li>
</ol>
</li>
<li>EDVAC：(了解)<ol>
<li>EDVAC(Electronic Discrete Variable Automatic Computer)是最早的电子计算机之一。与它的前身ENIAC不同，ENIAC是二进制的，而不是十进制的，它是一台存储程序计算机。</li>
<li>埃克特、莫奇利和其他ENIAC设计师与约翰·冯·诺依曼一起担任顾问职务；冯·诺依曼在1945年EDVAC报告初稿中总结和讨论了逻辑设计发展。埃克特、莫奇利和其他ENIAC设计师与约翰·冯·诺依曼一起担任顾问职务；冯·诺依曼在1945年EDVAC报告初稿中总结和讨论了逻辑设计发展。</li>
</ol>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt1/1.png"
                      alt="img"
                ></p>
<h3 id="Software-is-one-part-of-Hardware-50s"><a href="#Software-is-one-part-of-Hardware-50s" class="headerlink" title="Software is one part of Hardware -50s"></a>Software is one part of Hardware -50s</h3><ol>
<li>商业大型机：Ferranti Mark I、UNIVAC I、LEO I、IBM 701、IBM 650</li>
<li>编程语言，1955 FORTRAN，1958 LISP，1959 COBAL</li>
<li>命名：John W. Tukey在1958年发表在《美国数学月刊》上的一篇文章中，成为第一个定义运行电子计算器的程序的人。</li>
</ol>
<h3 id="Software-is-not-Hardware-60s"><a href="#Software-is-not-Hardware-60s" class="headerlink" title="Software is not Hardware - 60s"></a>Software is not Hardware - 60s</h3><ol>
<li>变革、ASCII美国信息交换标准码出现、ATM、IBM信息管理系统IMS应⽤于阿波罗航天器、软件咨询业务、IBM S&#x2F;360、信⽤卡、DEC PDP-1⼩型机</li>
<li>软件的特性<ol>
<li>软件与现实世界关系更加密切，对需求的规格化更加困难</li>
<li>软件⽐硬件容易修改的多，并且不需要昂贵的⽣产线复制产品</li>
<li>软件没有损耗</li>
<li>软件不可见</li>
</ol>
</li>
</ol>
<h3 id="Program-x3D-Algorithm-Data-Structure-70s-80s"><a href="#Program-x3D-Algorithm-Data-Structure-70s-80s" class="headerlink" title="Program &#x3D; Algorithm + Data Structure - 70s ~ 80s"></a>Program &#x3D; Algorithm + Data Structure - 70s ~ 80s</h3><ol>
<li>Algorithms + Data Structures &#x3D; Programs是Niklaus Wirth在1976年写的一本书，涵盖了计算机编程的一些基本主题，特别是算法和数据结构之间的内在联系。</li>
<li>For example, if one has a sorted list one will use a search algorithm optimal for sorted lists. 例如，如果一个人有一个已排序的列表，他将使用一个对已排序列表最合适的搜索算法。</li>
</ol>
<h3 id="Software-Development-is-much-more-complicated-than-Programming-90s-now"><a href="#Software-Development-is-much-more-complicated-than-Programming-90s-now" class="headerlink" title="Software Development is much more complicated than Programming - 90s ~ now"></a>Software Development is much more complicated than Programming - 90s ~ now</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt1/2.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt1/3.png"
                      alt="img"
                ></p>
<ol>
<li>软件类别<ul>
<li>系统软件:操作系统、数据库、数据仓库、嵌⼊式设备、安全</li>
<li>编程软件IDE、测试、持续集成、建模、度量</li>
<li>应用软件:商业、政府、休闲、医疗、教育、国防、 个⼈、专业、科学</li>
</ul>
</li>
<li>应用软件基于现实又高于现实<ul>
<li>应用软件被开发的目的和意图来源于现实世界的问题。</li>
<li>应用软件必须基于现实才能解决问题。</li>
<li>软件最终要被用于现实并改进现实。</li>
</ul>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt1/4.png"
                      alt="img"
                ></p>
<h4 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h4><ol>
<li>软件独立于硬件</li>
<li>软件是工具</li>
<li>软件 &#x3D; 程序 + 文档 + 数据 + 知识</li>
<li>软件的发展比编码更加复杂</li>
<li>应用软件源于现实，但是高于现实(课本P4)</li>
</ol>
<h3 id="工程"><a href="#工程" class="headerlink" title="工程"></a>工程</h3><ol>
<li><p>美国工程师专业发展委员会(ECPD，ABET的前身)将”工程”定义为：创造性地应用科学原理，设计或开发结构、机器、仪器或制造工艺，或单独或组合使用它们的工程；或在充分了解它们的设计的情况下建造或操作它们；或在特定操作条件下预测它们的行为；就预期功能、运行的经济性或生命财产安全而言</p>
</li>
<li><p>CCSE - About Engineer 关于工程师</p>
<ol>
<li>工程师通过⼀系列的<strong>讨论决策</strong>，仔细评估项⽬的可选活动，并在每个决策点选择⼀种在当前环境中适合工当前任务的⽅法进⾏工作。可以通过对成本和收益进⾏折衷分析调整相应策略。</li>
<li>工程师需要对某些对象进⾏度量，有时需要定量的工作；他们要校准和确认度量⽅法，并根据经验和实验数据进⾏估算。</li>
<li>软件工程师强调<strong>项目设计过程的纪律性</strong>，这是团队⾼效工作的条件。</li>
<li>工程师可胜任研究、开发、设计、⽣产、测试、构造、操作、管理，以及销售、咨询和培训等<strong>多种角色</strong>。</li>
<li>工程师们需要在某些过程中使⽤工具，选择和使用合适的工具是工程的关键要素。</li>
<li>工程师们通过专业协会发展和确认原理、标准和最佳实践⽅法，并提⾼个⼈能⼒。</li>
<li>工程师们能够重用设计和设计制品。</li>
</ol>
</li>
<li><p>工程师的决策往往进行折中，选择最优解。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Software-Engineering-and-Computing-II/img/cpt1/5.png"
                      alt="img"
                ></p>
<h4 id="工程要素"><a href="#工程要素" class="headerlink" title="工程要素"></a>工程要素</h4><ol>
<li>问题:动力</li>
<li>科学知识:工具</li>
<li>解决方法&#x2F;机器:物体</li>
<li>成本效益&#x2F;条件</li>
</ol>
</li>
</ol>
<h3 id="软件工程-1"><a href="#软件工程-1" class="headerlink" title="软件工程"></a>软件工程</h3><h4 id="什么是软件工程？-重要"><a href="#什么是软件工程？-重要" class="headerlink" title="什么是软件工程？(重要)"></a>什么是软件工程？(重要)</h4><ol>
<li>应用系统的、规范的、可量化的方法来开发、运行和维护软件，即将工程应用到软件。</li>
<li>对1)中各种方法的研究。</li>
</ol>
<h4 id="软件的工程的特点"><a href="#软件的工程的特点" class="headerlink" title="软件的工程的特点"></a>软件的工程的特点</h4><ol>
<li>具有解决实际问题的动机：工程学解决实际问题，⽽这些问题来源于工程领域之外的⼈：消费者。</li>
<li>应⽤科学知识指导工程活动：工程学不依赖于个⼈的技能，⽽是强调以科学知识为指导，按照特定⽅法与技术，进⾏规律性的设计、分析等活动，实现工程活动的可学习性和可重复性。</li>
<li>以成本效益⽐有效为基本条件：工程学不单单只是解决问题，它要有效利⽤所有资源，⾄少成本要低于效益，即成本效益⽐有效。</li>
<li>构建机器或事物：工程学强调构建实物⼯具，例如机器、事物等，并利⽤实物⼯具来解决问题。</li>
<li><strong>以服务人类为最终目的</strong>：工程学考虑的不是单个客户的需要，⽽是要运⽤技术和经验实现全社会的进步。</li>
</ol>
<h4 id="软件工程师面临的问题"><a href="#软件工程师面临的问题" class="headerlink" title="软件工程师面临的问题"></a>软件工程师面临的问题</h4><ol>
<li>现实世界是复杂的：如果现实世界的状况与我们的期望不符，这就产生了问题。</li>
<li>很广阔的范围：所有人类所涉及的领域、在其他工程领域，问题是有限的</li>
<li>大多数是不明确的，需要我们去发现：在其他工程领域，问题是确定和明确的</li>
<li>工程思维：客观的，知道你想要什么</li>
</ol>
<h4 id="科学知识"><a href="#科学知识" class="headerlink" title="科学知识"></a>科学知识</h4><ol>
<li>以计算科学为科学基础，基于科学和逻辑作为标准工具</li>
<li>很多领域都是被对称的创造出来的，依据方法&#x2F;方法论&#x2F;技术，使用语言、工具，进行研究</li>
</ol>
<h4 id="工程-x3D-科学-原则-艺术"><a href="#工程-x3D-科学-原则-艺术" class="headerlink" title="工程 &#x3D; 科学 + 原则 + 艺术"></a>工程 &#x3D; 科学 + 原则 + 艺术</h4><ol>
<li>科学:计算科学知识是软件工程的基础</li>
<li>原则:实践知识也应该被广泛的分享</li>
<li>艺术：创造力:分析，设计</li>
</ol>
<h4 id="问题-x2F-机器和产品"><a href="#问题-x2F-机器和产品" class="headerlink" title="问题&#x2F;机器和产品"></a>问题&#x2F;机器和产品</h4><ol>
<li>虚拟机 &#x3D; 通用机 + 特定的解决方案</li>
<li>解决方案可以在编程语言的帮助下映射到通用计算机上</li>
<li>并不像其他工程一样，不同问题有不同机器</li>
<li>解决方案的发展是软件工程首要的任务</li>
<li>将解决方案映射到通用机上是软件工程的次要任务</li>
</ol>
<h4 id="成本效益"><a href="#成本效益" class="headerlink" title="成本效益"></a>成本效益</h4><ol>
<li>可行性研究<ul>
<li>利益取决于用户</li>
<li>成本取决于软件工程师</li>
</ul>
</li>
<li>到达目的地的方法总是很多的，软件工程师应该选择最具成本效益的方法(而不是最先进的方法)</li>
<li>当成本和效益的关系不再重要的时候，软件工程师将会消失<ul>
<li>成本低：小规模编程</li>
<li>收益不明确：勘探研究</li>
<li>不计成本：计算科学研究</li>
<li>工程思想：成本和收益相平衡</li>
<li>控制和管理</li>
</ul>
</li>
</ol>
<h4 id="Understanding-of-Software-Engineering-软件工程的理解"><a href="#Understanding-of-Software-Engineering-软件工程的理解" class="headerlink" title="Understanding of Software Engineering 软件工程的理解"></a>Understanding of Software Engineering 软件工程的理解</h4><ol>
<li>软件工程是⼀种工程活动</li>
<li>软件工程的动机是解决实际问题</li>
<li>软件工程是科学性、实践性和⼯艺性并重的</li>
<li>软件工程追求⾜够好，不是最好</li>
<li>软件工程真正的产品是基于虚拟计算机的软件⽅案</li>
<li>软件工程的最终⽬的是要<strong>促进整个社会的进步</strong></li>
</ol>
<h3 id="知识域"><a href="#知识域" class="headerlink" title="知识域"></a>知识域</h3>]]></content>
      <categories>
        <category>软件工程与计算II</category>
      </categories>
  </entry>
</search>
